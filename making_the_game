# getting display to work -------------------------------------------------

# make the board

display <- function(x) {
  cat("  ", x[1], "|", x[2], "|", x[3], " ", "\n",
      " ---+---+--- \n",
      " ", x[4], "|", x[5], "|", x[6], " ", "\n",
      " ---+---+--- \n",
      " ", x[7], "|", x[8], "|", x[9], " ", "\n") 
}


# update ------------------------------------------------------------------

update <- function(who, pos, board) {
  for (i in 1:9) {
    if (pos == i & (board[i] == 'x' | board[i] == 'o')) {
      state <- as.character(1:9)
      stop('That spot has been taken. Please restart and enter a valid number.')
    }
  }
  if (pos > 9) {
    state <<- as.character(1:9)
    stop('Please restart and enter a valid number')
  }
  if (who=='P1') {
    board[pos] <- 'x'
  } else if (who=='P2') {
    board[pos] <- 'o'
  } else {
    board <- as.character(1:9)
    stop('Please restart and enter a valid number')
  }
  board <- board
}
  

# check winner ------------------------------------------------------------

# we set win to 0
# if our check_winner function determines x's win, we assign a 1 to win
# if our check_winner function determines o's win, we assing a 2 to win

win <- 0

# we also have a check vector
# if setdiff(state, check) returns length 0, then that means state consists of all
# x's and o's
# this means all spots have been taken and if there is no winner, it is a draw

check <- as.character(c('x', 'o'))

# write a case for when the game is a draw and over

check_winner <- function(x) {
  if ((x[1] ==  'x' & x[2] == 'x' & x[3] =='x') |
      (x[4] ==  'x' & x[5] == 'x' & x[6] =='x') |
      (x[7] ==  'x' & x[8] == 'x' & x[9] =='x') |
      (x[1] ==  'x' & x[4] == 'x' & x[7] =='x') |
      (x[2] ==  'x' & x[5] == 'x' & x[8] =='x') |
      (x[3] ==  'x' & x[6] == 'x' & x[9] =='x') |
      (x[1] ==  'x' & x[5] == 'x' & x[9] =='x') |
      (x[3] ==  'x' & x[5] == 'x' & x[7] =='x')){
    win <<- 1
    print('Player 1 wins!')
  } else if
  ((x[1] ==  'o' & x[2] == 'o' & x[3] =='o') |
   (x[4] ==  'o' & x[5] == 'o' & x[6] =='o') |
   (x[7] ==  'o' & x[8] == 'o' & x[9] =='o') |
   (x[1] ==  'o' & x[4] == 'o' & x[7] =='o') |
   (x[2] ==  'o' & x[5] == 'o' & x[8] =='o') |
   (x[3] ==  'o' & x[6] == 'o' & x[9] =='o') |
   (x[1] ==  'o' & x[5] == 'o' & x[9] =='o') |
   (x[3] ==  'o' & x[5] == 'o' & x[7] =='o')){
    win <<- 2
    print('Player 2 wins!')
  } else if (length(setdiff(x, check)) == 0){
    print('We have a draw. Play again?')
  } 
  
  else {
    print('No winner yet.')
  }
}



# computer_turn -----------------------------------------------------------

# a function to determine how many turns have been played

# figuring out who's turn it is

# if there is an x or o we add 1 to get the total amount of turns
# if there have been 0,2,4,6, or 8  turns then it is x's turn
# if there have been 1,3,5, or 7 then it is o's turn

x_turn <- c(0,2,4,6,8)
o_turn <- c(1,3,5,7)

number_turns <- function(board) {
  num_turns = 0
  for (i in 1:9) { 
    if (board[i] == 'x' | board[i] == 'o' ) { 
      num_turns <- num_turns + 1
    }  
  }
  return(num_turns)
}


computer_turn <- function(board) {
  
  num_turns <- number_turns(board)
  
  # when the computer goes first
  if (num_turns %in% x_turn) {
    
    # first we check for winning scenarios
    
    # checking the top row for winning
    if (board[1] == 'x' & board[2] == 'x' & board[3] == '3') {
      return(3)
    } else if (board[1] == 'x' & board[2] == '2' & board[3] == 'x') {
      return(2)
    } else if (board[1] == '1' & board[2] == 'x' & board[3] == 'x') {
      return(1)
      
      # checking the middle row for winning
    } else if (board[4] == 'x' & board[5] == 'x' & board[6] == '6') {
      return(6)
    } else if (board[4] == 'x' & board[5] == '5' & board[6] == 'x') {
      return(5)
    } else if (board[4] == '4' & board[5] == 'x' & board[6] == 'x') {
      return(4)
      
      # checking the middle row for winning 
    } else if (board[7] == 'x' & board[8] == 'x' & board[9] == '9') {
      return(9)
    } else if (board[7] == 'x' & board[8] == '8' & board[9] == 'x') {
      return(8)
    } else if (board[7] == '7' & board[8] == 'x' & board[9] == 'o') {
      return(7)
      
      # checking the first column for winning  
    } else if (board[1] == 'x' & board[4] == 'x' & board[7] == '7') {
      return(7)
    } else if (board[1] == 'x' & board[4] == '4' & board[7] == 'x') {
      return(4)
    } else if (board[1] == '1' & board[4] == 'x' & board[7] == 'x') {
      return(1)
      
      # checking the second column for winning  
    } else if (board[2] == 'x' & board[5] == 'x' & board[8] == '8') {
      return(8)
    } else if (board[2] == 'x' & board[5] == '5' & board[8] == 'x') {
      return(5)
    } else if (board[2] == '2' & board[5] == 'x' & board[8] == 'x') {
      return(2)
      
      # checking the third column for winning  
    } else if (board[3] == 'x' & board[6] == 'x' & board[9] == '9') {
      return(9)
    } else if (board[3] == 'x' & board[6] == '6' & board[9] == 'x') {
      return(6)
    } else if (board[3] == '3' & board[6] == 'x' & board[9] == 'x') {
      return(3)
      
      # checking the diagonal from 3 to 7 for winning 
    } else if (board[3] == 'x' & board[5] == 'x' & board[7] == '7') {
      return(7)
    } else if (board[3] == 'x' & board[5] == '5' & board[7] == 'x') {
      return(5)
    } else if (board[3] == '3' & board[5] == 'x' & board[7] == 'x') {
      return(3)
      
      # checking the diagonal from 1 to 9 for winning  
    } else if (board[1] == 'x' & board[5] == 'x' & board[9] == '9') {
      return(9)
    } else if (board[1] == 'x' & board[5] == '5' & board[9] == 'x') {
      return(5)
    } else if (board[1] == '1' & board[5] == 'x' & board[9] == 'x') {
      return(1)
      
      
      
      # now we must check for blocking scenarios 
      
      # checking the first row for blocking
    } else if (board[1] == 'o' & board[2] == 'o' & board[3] == '3') {
      return(3)
    } else if (board[1] == 'o' & board[2] == '2' & board[3] == 'o') {
      return(2)
    } else if (board[1] == '1' & board[2] == 'o' & board[3] == 'o') {
      return(1)
      
      # checking the middle row for blocking
    } else if (board[4] == 'o' & board[5] == 'o' & board[6] == '6') {
      return(6)
    } else if (board[4] == 'o' & board[5] == '5' & board[6] == 'o') {
      return(5)
    } else if (board[4] == '4' & board[5] == 'o' & board[6] == 'o') {
      return(4)
      
      # checking the middle row for blocking 
    } else if (board[7] == 'o' & board[8] == 'o' & board[9] == '9') {
      return(9)
    } else if (board[7] == 'o' & board[8] == '8' & board[9] == 'o') {
      return(8)
    } else if (board[7] == '7' & board[8] == 'o' & board[9] == 'o') {
      return(7)
      
      # checking the first column for blocking  
    } else if (board[1] == 'o' & board[4] == 'o' & board[7] == '7') {
      return(7)
    } else if (board[1] == 'o' & board[4] == '4' & board[7] == 'o') {
      return(4)
    } else if (board[1] == '1' & board[4] == 'o' & board[7] == 'o') {
      return(1)
      
      # checking the second column for blocking  
    } else if (board[2] == 'o' & board[5] == 'o' & board[8] == '8') {
      return(8)
    } else if (board[2] == 'o' & board[5] == '5' & board[8] == 'o') {
      return(5)
    } else if (board[2] == '2' & board[5] == 'o' & board[8] == 'o') {
      return(2)
      
      # checking the third column for blocking  
    } else if (board[3] == 'o' & board[6] == 'o' & board[9] == '9') {
      return(9)
    } else if (board[3] == 'o' & board[6] == '6' & board[9] == 'o') {
      return(6)
    } else if (board[3] == '3' & board[6] == 'o' & board[9] == 'o') {
      return(3)
      
      # checking the diagonal from 3 to 7 for blocking 
    } else if (board[3] == 'o' & board[5] == 'o' & board[7] == '7') {
      return(7)
    } else if (board[3] == 'o' & board[5] == '5' & board[7] == 'o') {
      return(5)
    } else if (board[3] == '3' & board[5] == 'o' & board[7] == 'o') {
      return(3)
      
      # checking the diagonal from 1 to 9 for blocking and blocking  
    } else if (board[1] == 'o' & board[5] == 'o' & board[9] == '9') {
      return(9)
    } else if (board[1] == 'o' & board[5] == '5' & board[9] == 'o') {
      return(5)
    } else if (board[1] == '1' & board[5] == 'o' & board[9] == 'o') {
      return(1)
      
      # now we pick the lowest spot if we can't block or win  
    } else if (board[1] == '1') {
      return(1)
    } else if (board[2] == '2') {
      return(2)
    } else if (board[3] == '3') {
      return(3)
    } else if (board[4] == '4') {
      return(4)
    } else if (board[5] == '5') {
      return(5)
    } else if (board[6] == '6') {
      return(6)
    } else if (board[7] == '7') {
      return(7)
    } else if (board[8] == '8') {
      return(8)
    } else if (board[9] == '9') {
      return(9)
    }
    
    # checking if cpu goes second
    
  } else if (num_turns %in% o_turn) {
    
    
    # first we check for winning scenarios
    
    # checking the top row for winning
    if (board[1] == 'o' & board[2] == 'o' & board[3] == '3') {
      return(3)
    } else if (board[1] == 'o' & board[2] == '2' & board[3] == 'o') {
      return(2)
    } else if (board[1] == '1' & board[2] == 'o' & board[3] == 'o') {
      return(1)
      
      # checking the middle row for winning
    } else if (board[4] == 'o' & board[5] == 'o' & board[6] == '6') {
      return(6)
    } else if (board[4] == 'o' & board[5] == '5' & board[6] == 'o') {
      return(5)
    } else if (board[4] == '4' & board[5] == 'o' & board[6] == 'o') {
      return(4)
      
      # checking the middle row for winning 
    } else if (board[7] == 'o' & board[8] == 'o' & board[9] == '9') {
      return(9)
    } else if (board[7] == 'o' & board[8] == '8' & board[9] == 'o') {
      return(8)
    } else if (board[7] == '7' & board[8] == 'o' & board[9] == 'o') {
      return(7)
      
      # checking the first column for winning  
    } else if (board[1] == 'o' & board[4] == 'o' & board[7] == '7') {
      return(7)
    } else if (board[1] == 'o' & board[4] == '4' & board[7] == 'o') {
      return(4)
    } else if (board[1] == '1' & board[4] == 'o' & board[7] == 'o') {
      return(1)
      
      # checking the second column for winning  
    } else if (board[2] == 'o' & board[5] == 'o' & board[8] == '8') {
      return(8)
    } else if (board[2] == 'o' & board[5] == '5' & board[8] == 'o') {
      return(5)
    } else if (board[2] == '2' & board[5] == 'o' & board[8] == 'o') {
      return(2)
      
      # checking the third column for winning  
    } else if (board[3] == 'o' & board[6] == 'o' & board[9] == '9') {
      return(9)
    } else if (board[3] == 'o' & board[6] == '6' & board[9] == 'o') {
      return(6)
    } else if (board[3] == '3' & board[6] == 'o' & board[9] == 'o') {
      return(3)
      
      # checking the diagonal from 3 to 7 for blocking and winning 
    } else if (board[3] == 'o' & board[5] == 'o' & board[7] == '7') {
      return(7)
    } else if (board[3] == 'o' & board[5] == '5' & board[7] == 'o') {
      return(5)
    } else if (board[3] == '3' & board[5] == 'o' & board[7] == 'o') {
      return(3)
      
      # checking the diagonal from 1 to 9 for blocking and winning  
    } else if (board[1] == 'o' & board[5] == 'o' & board[9] == '9') {
      return(9)
    } else if (board[1] == 'o' & board[5] == '5' & board[9] == 'o') {
      return(5)
    } else if (board[1] == '1' & board[5] == 'o' & board[9] == 'o') {
      return(1)
      
      
      
      # now we must check for blocking scenarios 
      
      # checking the first row for blocking
    } else if (board[1] == 'x' & board[2] == 'x' & board[3] == '3') {
      return(3)
    } else if (board[1] == 'x' & board[2] == '2' & board[3] == 'x') {
      return(2)
    } else if (board[1] == '1' & board[2] == 'x' & board[3] == 'x') {
      return(1)
      
      # checking the middle row for blocking
    } else if (board[4] == 'x' & board[5] == 'x' & board[6] == '6') {
      return(6)
    } else if (board[4] == 'x' & board[5] == '5' & board[6] == 'x') {
      return(5)
    } else if (board[4] == '4' & board[5] == 'x' & board[6] == 'x') {
      return(4)
      
      # checking the middle row for blocking 
    } else if (board[7] == 'x' & board[8] == 'x' & board[9] == '9') {
      return(9)
    } else if (board[7] == 'x' & board[8] == '8' & board[9] == 'x') {
      return(8)
    } else if (board[7] == '7' & board[8] == 'x' & board[9] == 'x') {
      return(7)
      
      # checking the first column for blocking  
    } else if (board[1] == 'x' & board[4] == 'x' & board[7] == '7') {
      return(7)
    } else if (board[1] == 'x' & board[4] == '4' & board[7] == 'x') {
      return(4)
    } else if (board[1] == '1' & board[4] == 'x' & board[7] == 'x') {
      return(1)
      
      # checking the second column for blocking  
    } else if (board[2] == 'x' & board[5] == 'x' & board[8] == '8') {
      return(8)
    } else if (board[2] == 'x' & board[5] == '5' & board[8] == 'x') {
      return(5)
    } else if (board[2] == '2' & board[5] == 'x' & board[8] == 'x') {
      return(2)
      
      # checking the third column for blocking  
    } else if (board[3] == 'x' & board[6] == 'x' & board[9] == '9') {
      return(9)
    } else if (board[3] == 'x' & board[6] == '6' & board[9] == 'x') {
      return(6)
    } else if (board[3] == '3' & board[6] == 'x' & board[9] == 'x') {
      return(3)
      
      # checking the diagonal from 3 to 7 for blocking and blocking 
    } else if (board[3] == 'x' & board[5] == 'x' & board[7] == '7') {
      return(7)
    } else if (board[3] == 'x' & board[5] == '5' & board[7] == 'x') {
      return(5)
    } else if (board[3] == '3' & board[5] == 'x' & board[7] == 'x') {
      return(3)
      
      # checking the diagonal from 1 to 9 for blocking and blocking  
    } else if (board[1] == 'x' & board[5] == 'x' & board[9] == '9') {
      return(9)
    } else if (board[1] == 'x' & board[5] == '5' & board[9] == 'x') {
      return(5)
    } else if (board[1] == '1' & board[5] == 'x' & board[9] == 'x') {
      return(1)
      
      # now we pick the lowest spot if we can't block or win  
    } else if (board[1] == '1') {
      return(1)
    } else if (board[2] == '2') {
      return(2)
    } else if (board[3] == '3') {
      return(3)
    } else if (board[4] == '4') {
      return(4)
    } else if (board[5] == '5') {
      return(5)
    } else if (board[6] == '6') {
      return(6)
    } else if (board[7] == '7') {
      return(7)
    } else if (board[8] == '8') {
      return(8)
    } else if (board[9] == '9') {
      return(9)
    }
  }
}


# play function -----------------------------------------------------------

# assigning all the necessary variables against just in case

win <- 0
check <- as.character(c('x', 'o'))
x_turn <- c(0,2,4,6,8)
o_turn <- c(1,3,5,7)

play <- function() {
  
  state <- as.character(1:9)
  
  # ask how many players are going to play
  num_players = readline('How many players? 1 or 2?')
  if (num_players==1) {
    print('We will be playing the computer.')
    # figure out where the computer is playing
    comp_turn_pos = as.numeric(readline('Will the computer be player 1 or 2?'))
    if (comp_turn_pos == 1) {
      print('The computer will go first.')
    } else if (comp_turn_pos == 2) {
      print('The player will be going first.')
    } else {
      stop('Please start over and select 1 or 2.') # If not valid players, start over
    }
  } else if (num_players==2){
    print('We will be playing against each other.')
  } else {
    stop('Please start over and select 1 or 2.') # If not valid players, start over.
  }
  start = readline('Press enter when ready.')
  
  # for when we have two players
  
  if (num_players == 2) {

    while (win==0){
      
      #p1 turn
      display(state)
      p1_turn <- as.numeric(readline('Please choose your spot P1.')) 
        # Get players choice
      state <- update('P1', p1_turn, state) # Put the players choice in
      check_winner(state) # Update the win value or stay at 0
      win
      
      # check if win has been updated to 1 (denoting a P1 win) to stop the while loop
      # also check if all spaces have been taken and the game is a tie
      check <- as.character(c('x', 'o'))
      if (win == 1){
        break
      } else if (length(setdiff(state, check)) == 0){
        break # If there is no difference between state and check, it consists of 
      }       # entirely of x's and o's, showing the game is over.
      
      #p2 turn
      display(state)
      p2_turn <- as.numeric(readline('Please choose your spot P2.'))
      state <- update('P2', p2_turn, state)
      check_winner(state)
      win
    }
    
    # for when we have the computer playing second  
  } else if (num_players == 1 & comp_turn_pos == 2) {
    while (win==0){
      
      #p1 turn
      display(state)
      p1_turn <- as.numeric(readline('Please choose your spot P1.')) 
      # Get players choice
      state <- update('P1', p1_turn, state) # Put the players choice in
      check_winner(state) # Update the win value or stay at 0
      win
      
      # check if win has been updated to 1 (denoting a P1 win) to stop the while loop
      # also check if all spaces have been taken and the game is a tie
      check <- as.character(c('x', 'o'))
      if (win == 1){
        break
      } else if (length(setdiff(state, check)) == 0){
        break # If there is no difference between state and check, it consists of 
      }       # entirely of x's and o's, showing the game is over.
      
      # computer turn
      display(state)
      readline('Press enter when you want the computer to play.')
      cpu_place <- computer_turn(state)
      state <- update('P2', cpu_place, state)
      check_winner(state)
      win
    }
    
    # for when we have the computer playing first  
  } else if (num_players == 1 & comp_turn_pos == 1) {
    while (win==0){
      
      # computer turn
      display(state)
      readline('Press enter when you want the computer to play.')
      cpu_place <- computer_turn(state)
      state <- update('P1', cpu_place, state)
      check_winner(state)
      win
      
      
      # check if win has been updated to 1 (denoting a P1 win) to stop the while loop
      # also check if all spaces have been taken and the game is a tie
      check <- as.character(c('x', 'o'))
      if (win == 1){
        break
      } else if (length(setdiff(state, check)) == 0){
        break # If there is no difference between state and check, it consists of 
      }       # entirely of x's and o's, showing the game is over.
      
      #p2 turn
      display(state)
      p2_turn <- as.numeric(readline('Please choose your spot P2.'))
      state <- update('P2', p2_turn, state)
      check_winner(state)
      win
      
    }
    
  }
  display(state)
  win <<- 0
}

play()
